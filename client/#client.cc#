#include <iostream>
#include <boost/asio.hpp>
#include <boost/asio/io_service.hpp>

#include <boost/filesystem/path.hpp>
#include <boost/log/trivial.hpp>

#include "client_https.hpp"
#include "../common/logger.h"

using namespace SimpleWeb;


void Client<HTTPS>::open_file(std::string const& t_path) {
    m_source_file.open(t_path, std::ios_base::binary | std::ios_base::ate);

    if (m_source_file.fail()) {
        throw std::fstream::failure("Failed opening file " + t_path);
    }

    m_source_file.seekg(0, m_source_file.end);
    auto file_size = m_source_file.tellg();
    m_source_file.seekg(0, m_source_file.beg);

    boost::asio::streambuf write_buffer;
    std::iostream write_stream(&write_buffer);
    
//    boost::asio::streambuf write_buffer;
//    std::ostream request_stream(&write_buffer);

//    boost::filesystem::path p(t_path);

//   request_stream << p.filename().string() << "\n" << file_size << "\n\n";
//   BOOST_LOG_TRIVIAL(trace) << "Request size: " << m_request.size();

    if (m_source_file) {
//        m_source_file.read(.data(), m_buf.size());
        if (m_source_file.fail() && !m_source_file.eof()) {
            auto msg = "Failed while reading file";
            BOOST_LOG_TRIVIAL(error) << msg;
            throw std::fstream::failure(msg);
        }
        // TODO: file_name
        write_stream << m_source_file.rdbuf();
    }
    request("POST", "/upload", write_stream);
}
